{"version":3,"sources":["scripts/main.js"],"names":["employeesList","document","querySelector","sortListItems","list","listChildren","children","sort","a","b","innerA","attributes","getNamedItem","value","slice","split","join","sortList","listItems","item","append"],"mappings":";AAAA,aA6BA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA3BA,IAAMA,EAAgBC,SAASC,cAAc,MAEvCC,EAAgB,SAACC,GAGdC,OAFkBD,EAAAA,EAAKE,UAEVC,KAAK,SAACC,EAAGC,GAMvBC,OALYF,EAAEG,WAAWC,aAAa,eACvCC,MAAMC,MAAM,GAAGC,MAAM,KAAKC,KAAK,KAClBP,EAAEE,WAAWC,aAAa,eACvCC,MAAMC,MAAM,GAAGC,MAAM,KAAKC,KAAK,IAGzB,GAEC,KAKRC,EAAW,SAACb,GACVc,IADmB,EAGNA,EAAAA,EAFDf,EAAcC,IADP,IAGK,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAnBe,IAAAA,EAAmB,EAAA,MAC5Bf,EAAKgB,OAAOD,IAJW,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,MAQ3BF,EAASjB","file":"main.58d2e0c7.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst employeesList = document.querySelector('ul');\n\nconst sortListItems = (list) => {\n  const listChildren = [...list.children];\n\n  return listChildren.sort((a, b) => {\n    const innerA = +a.attributes.getNamedItem('data-salary')\n      .value.slice(1).split(',').join('');\n    const innerB = +b.attributes.getNamedItem('data-salary')\n      .value.slice(1).split(',').join('');\n\n    if (innerA < innerB) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n};\n\nconst sortList = (list) => {\n  const listItems = sortListItems(list);\n\n  for (const item of listItems) {\n    list.append(item);\n  }\n};\n\nsortList(employeesList);\n"]}